{"version":3,"sources":["../src/utils.ts"],"names":["CryptoUtils","length","array","b","codeVerifier","data","digest","base64Url","padding","base64","rawData","output","i","SessionManager","key","value","scope","state","nonce"],"mappings":"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","file":"chunk-QJHWM2GT.js","sourcesContent":["\nexport class CryptoUtils {\n  static generateRandomString(length: number): string {\n    const array = new Uint8Array(length);\n    crypto.getRandomValues(array);\n    return Array.from(array, (b) => b.toString(16).padStart(2, \"0\")).join(\"\");\n  }\n\n  static async generateCodeChallenge(codeVerifier: string): Promise<string> {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(codeVerifier);\n    const digest = await crypto.subtle.digest(\"SHA-256\", data);\n    return btoa(String.fromCharCode(...new Uint8Array(digest)))\n      .replace(/\\+/g, \"-\")\n      .replace(/\\//g, \"_\")\n      .replace(/=+$/, \"\");\n  }\n\n  static base64UrlToArrayBuffer(base64Url: string): ArrayBuffer {\n    const padding = \"=\".repeat((4 - (base64Url.length % 4)) % 4);\n    const base64 = base64Url.replace(/-/g, \"+\").replace(/_/g, \"/\") + padding;\n    const rawData = atob(base64);\n    const output = new Uint8Array(rawData.length);\n    for (let i = 0; i < rawData.length; ++i) {\n      output[i] = rawData.charCodeAt(i);\n    }\n    return output;\n  }\n\n  static checkBrowserCompatibility(): boolean {\n    return !!(globalThis.crypto && globalThis.crypto.subtle);\n  }\n}\n\nexport class SessionManager {\n  static setItem(key: string, value: string): void {\n    sessionStorage.setItem(`tx_auth_${key}`, value);\n  }\n  static getItem(key: string): string | null {\n    return sessionStorage.getItem(`tx_auth_${key}`);\n  }\n  static removeItem(key: string): void {\n    sessionStorage.removeItem(`tx_auth_${key}`);\n  }\n  static clear(): void {\n    const keys = [\"state\", \"code_verifier\", \"nonce\", \"success\", \"authenticated\", \"user\"];\n    keys.forEach((key) => this.removeItem(key));\n  }\n  static generateAndStoreAuthData(scope: string): { state: string; nonce?: string; codeVerifier: string } {\n    const state = CryptoUtils.generateRandomString(32);\n    const nonce = CryptoUtils.generateRandomString(32);\n    const codeVerifier = CryptoUtils.generateRandomString(64);\n    this.setItem(\"state\", state);\n    this.setItem(\"code_verifier\", codeVerifier);\n    if (scope.includes(\"openid\")) {\n      this.setItem(\"nonce\", nonce);\n      return { state, nonce, codeVerifier };\n    }\n    return { state, codeVerifier };\n  }\n}\n"]}