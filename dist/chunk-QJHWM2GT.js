var s=class{static generateRandomString(t){let e=new Uint8Array(t);return crypto.getRandomValues(e),Array.from(e,n=>n.toString(16).padStart(2,"0")).join("")}static async generateCodeChallenge(t){let n=new TextEncoder().encode(t),r=await crypto.subtle.digest("SHA-256",n);return btoa(String.fromCharCode(...new Uint8Array(r))).replace(/\+/g,"-").replace(/\//g,"_").replace(/=+$/,"")}static base64UrlToArrayBuffer(t){let e="=".repeat((4-t.length%4)%4),n=t.replace(/-/g,"+").replace(/_/g,"/")+e,r=atob(n),o=new Uint8Array(r.length);for(let a=0;a<r.length;++a)o[a]=r.charCodeAt(a);return o}static checkBrowserCompatibility(){return !!(globalThis.crypto&&globalThis.crypto.subtle)}},i=class{static setItem(t,e){sessionStorage.setItem(`tx_auth_${t}`,e);}static getItem(t){return sessionStorage.getItem(`tx_auth_${t}`)}static removeItem(t){sessionStorage.removeItem(`tx_auth_${t}`);}static clear(){["state","code_verifier","nonce","success","authenticated","user"].forEach(e=>this.removeItem(e));}static generateAndStoreAuthData(t){let e=s.generateRandomString(32),n=s.generateRandomString(32),r=s.generateRandomString(64);return this.setItem("state",e),this.setItem("code_verifier",r),t.includes("openid")?(this.setItem("nonce",n),{state:e,nonce:n,codeVerifier:r}):{state:e,codeVerifier:r}}};
export{s as a,i as b};//# sourceMappingURL=chunk-QJHWM2GT.js.map
//# sourceMappingURL=chunk-QJHWM2GT.js.map